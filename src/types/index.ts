import type { openai } from '@ai-sdk/openai'
import type { ColumnType, Kysely } from 'kysely'

export type LLM = Parameters<typeof openai>[0]
export type SearchResult = {
	tagId: string
	tagBody: string
	factId: string
	factBody: string
	similarity: number
}

/**
 * Auto-generated by Kysely:
 */
export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
	? ColumnType<S, I | undefined, U>
	: ColumnType<T, T | undefined, T>

export type Timestamp = ColumnType<Date, Date | string>

export interface Fact {
	body: string
	createdAt: Generated<Timestamp>
	id: string
	updatedAt: Generated<Timestamp>
	userId: string
}

export interface Relationship {
	createdAt: Generated<Timestamp>
	factId: string
	id: string
	tagId: string
	updatedAt: Generated<Timestamp>
	userId: string
}

export interface Tag {
	body: string
	createdAt: Generated<Timestamp>
	id: string
	updatedAt: Generated<Timestamp>
	userId: string
	vector: string | null
}

export interface Schema {
	fact: Fact
	relationship: Relationship
	tag: Tag
}

export type Database = Kysely<Schema>
